#!/usr/bin/env python3
"""
Test espec√≠fico para probar la URL de b√∫squeda de la Corte Constitucional usando Selenium.
"""

import urllib.parse
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from ..config import ScrapingConfig

def test_specific_scraping():
    """Prueba la URL espec√≠fica de b√∫squeda usando Selenium."""
    
    print("üß™ Probando URL espec√≠fica de b√∫squeda con Selenium...")
    print("=" * 60)
    
    # Probando la URL espec√≠fica que proporcionaste
    texto_busqueda = "Marcela como agente oficiosa de su nieta Sara en contra de la Secretar√≠a de Educaci√≥n"
    
    # Construir URL de b√∫squeda
    url = f"https://www.corteconstitucional.gov.co/relatoria/buscador-jurisprudencia/texto/1992-01-01/2025-08-17/{urllib.parse.quote(texto_busqueda, safe='')}/0/0"
    
    print(f"Texto original: {texto_busqueda}")
    print(f"URL de b√∫squeda: {url}")
    print()
    
    # Verificar codificaci√≥n
    texto_codificado = urllib.parse.quote(texto_busqueda, safe='')
    print(f"Texto codificado: {texto_codificado}")
    
    # Verificar decodificaci√≥n
    texto_decodificado = urllib.parse.unquote(texto_codificado)
    print(f"Texto decodificado: {texto_decodificado}")
    print(f"¬øCoincide con original?: {texto_decodificado == texto_busqueda}")
    print()
    
    driver = None
    try:
        print("üöÄ Iniciando Selenium...")
        
        # Configurar Chrome
        chrome_options = Options()
        for key, value in ScrapingConfig.get_chrome_options().items():
            chrome_options.add_argument(f"--{key}={value}")
        
        driver = webdriver.Chrome(options=chrome_options)
        driver.set_page_load_timeout(ScrapingConfig.SELENIUM_PAGE_LOAD_TIMEOUT)
        
        print("üåê Navegando a la URL...")
        driver.get(url)
        
        # Esperar a que la p√°gina cargue
        wait = WebDriverWait(driver, ScrapingConfig.SELENIUM_WAIT_TIMEOUT)
        wait.until(EC.presence_of_element_located((By.TAG_NAME, "body")))
        
        # Tiempo extra para que Angular renderice
        import time
        time.sleep(ScrapingConfig.SELENIUM_RENDER_DELAY)
        
        print("üìÑ Analizando contenido de la p√°gina...")
        
        # Obtener informaci√≥n b√°sica de la p√°gina
        title = driver.title
        print(f"üìã T√≠tulo de la p√°gina: {title}")
        
        # Obtener URL actual (por si hay redirecciones)
        current_url = driver.current_url
        print(f"üîó URL actual: {current_url}")
        
        # Analizar contenido de la p√°gina
        body_text = driver.find_element(By.TAG_NAME, "body").text.lower()
        print(f"üìä Tama√±o del contenido: {len(body_text)} caracteres")
        
        # Buscar indicadores de resultados o errores
        indicadores_error = [
            'error', 'no encontrado', 'sin resultados', 'no se encontraron',
            'p√°gina no encontrada', '404', 'bad request', 'invalid'
        ]
        
        print("\n=== AN√ÅLISIS DE CONTENIDO ===")
        for indicador in indicadores_error:
            if indicador in body_text:
                print(f"‚ö†Ô∏è Posible indicador de error encontrado: '{indicador}'")
        
        # Buscar elementos espec√≠ficos de la p√°gina de b√∫squeda
        elementos_busqueda = [
            'buscador', 'jurisprudencia', 'relatoria', 'corte constitucional',
            'providencia', 'sentencia', 'tutela'
        ]
        
        print("\n=== ELEMENTOS DE LA P√ÅGINA ===")
        for elemento in elementos_busqueda:
            if elemento in body_text:
                print(f"‚úÖ Elemento encontrado: '{elemento}'")
        
        # Buscar patrones de sentencias
        import re
        sentencias_encontradas = re.findall(ScrapingConfig.SENTENCIA_PATTERN, body_text)
        if sentencias_encontradas:
            print(f"\nüìú Sentencias encontradas: {len(sentencias_encontradas)}")
            for i, sentencia in enumerate(sentencias_encontradas[:5], 1):
                print(f"   {i}. {sentencia}")
        else:
            print("\nüìú No se encontraron patrones de sentencias")
        
        # Verificar si hay elementos de interfaz de usuario
        try:
            # Buscar elementos que podr√≠an indicar que la p√°gina carg√≥ correctamente
            elementos_ui = driver.find_elements(By.CSS_SELECTOR, "input, button, table, .resultado, .sentencia")
            print(f"\nüé® Elementos de UI encontrados: {len(elementos_ui)}")
            
            if elementos_ui:
                print("‚úÖ La p√°gina parece haber cargado correctamente con elementos de interfaz")
            else:
                print("‚ö†Ô∏è No se encontraron elementos de interfaz de usuario")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error al buscar elementos de UI: {e}")
        
        print("\n‚úÖ Test espec√≠fico completado exitosamente!")
        return True
        
    except TimeoutException:
        print("‚è∞ Timeout: La p√°gina tard√≥ demasiado en cargar")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        if driver:
            print("üßπ Cerrando navegador...")
            driver.quit()

if __name__ == "__main__":
    test_specific_scraping()
